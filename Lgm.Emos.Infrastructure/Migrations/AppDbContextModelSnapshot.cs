// <auto-generated />
using Lgm.Emos.Infrastructure.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage;
using Microsoft.EntityFrameworkCore.Storage.Internal;
using System;

namespace Lgm.Emos.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.0.2-rtm-10011")
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Lgm.Emos.Core.Entities.ApplicationGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("ApplicationGroup");
                });

            modelBuilder.Entity("Lgm.Emos.Core.Entities.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("AdditionalInfo")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("CardTypeId")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateCreation")
                        .HasMaxLength(50);

                    b.Property<DateTime>("DateExpiration")
                        .HasMaxLength(50);

                    b.Property<bool>("IsActive");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Card");
                });

            modelBuilder.Entity("Lgm.Emos.Core.Entities.Entity", b =>
                {
                    b.Property<int>("EntityId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("ParentEntityEntityId");

                    b.Property<int?>("UserId");

                    b.Property<int>("idPicture")
                        .HasMaxLength(50);

                    b.HasKey("EntityId");

                    b.HasIndex("ParentEntityEntityId");

                    b.HasIndex("UserId");

                    b.ToTable("Entity");
                });

            modelBuilder.Entity("Lgm.Emos.Core.Entities.Function", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Function");
                });

            modelBuilder.Entity("Lgm.Emos.Core.Entities.Grade", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("IdPicture")
                        .HasMaxLength(50);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int>("Rank")
                        .HasMaxLength(50);

                    b.HasKey("Id");

                    b.ToTable("Grade");
                });

            modelBuilder.Entity("Lgm.Emos.Core.Entities.Team", b =>
                {
                    b.Property<int>("TeamId")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("ApplyScheduleAccessRule")
                        .HasMaxLength(50);

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("EntityId");

                    b.Property<bool>("IsActive");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TeamLeaderTeamId");

                    b.Property<int?>("UserId");

                    b.HasKey("TeamId");

                    b.HasIndex("EntityId");

                    b.HasIndex("TeamLeaderTeamId");

                    b.HasIndex("UserId");

                    b.ToTable("Team");
                });

            modelBuilder.Entity("Lgm.Emos.Core.Entities.Tool", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Description")
                        .HasMaxLength(256);

                    b.Property<string>("Ref")
                        .IsRequired();

                    b.HasKey("Id");

                    b.ToTable("Tool");
                });

            modelBuilder.Entity("Lgm.Emos.Core.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CardCode");

                    b.Property<int?>("CardId");

                    b.Property<DateTime>("DateOfBirth")
                        .HasMaxLength(50);

                    b.Property<int?>("EntityId");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("FunctionId");

                    b.Property<int?>("GradeId");

                    b.Property<int?>("GroupId");

                    b.Property<int>("IdPicture");

                    b.Property<bool>("IsActive");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<int?>("TeamId");

                    b.HasKey("UserId");

                    b.HasIndex("CardId");

                    b.HasIndex("EntityId");

                    b.HasIndex("FunctionId");

                    b.HasIndex("GradeId");

                    b.HasIndex("GroupId");

                    b.HasIndex("TeamId");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Lgm.Emos.Core.Entities.UserEntity", b =>
                {
                    b.Property<int>("EntityId");

                    b.Property<int>("UserId");

                    b.Property<int>("Id");

                    b.HasKey("EntityId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserEntity");
                });

            modelBuilder.Entity("Lgm.Emos.Core.Entities.UserTeam", b =>
                {
                    b.Property<int>("TeamId");

                    b.Property<int>("UserId");

                    b.Property<int>("Id");

                    b.HasKey("TeamId", "UserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserTeam");
                });

            modelBuilder.Entity("Lgm.Emos.Core.Entities.Entity", b =>
                {
                    b.HasOne("Lgm.Emos.Core.Entities.Entity", "ParentEntity")
                        .WithMany()
                        .HasForeignKey("ParentEntityEntityId");

                    b.HasOne("Lgm.Emos.Core.Entities.User")
                        .WithMany("Entities")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Lgm.Emos.Core.Entities.Team", b =>
                {
                    b.HasOne("Lgm.Emos.Core.Entities.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId");

                    b.HasOne("Lgm.Emos.Core.Entities.Team", "TeamLeader")
                        .WithMany()
                        .HasForeignKey("TeamLeaderTeamId");

                    b.HasOne("Lgm.Emos.Core.Entities.User")
                        .WithMany("Teams")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Lgm.Emos.Core.Entities.User", b =>
                {
                    b.HasOne("Lgm.Emos.Core.Entities.Card", "Card")
                        .WithMany()
                        .HasForeignKey("CardId");

                    b.HasOne("Lgm.Emos.Core.Entities.Entity")
                        .WithMany("Users")
                        .HasForeignKey("EntityId");

                    b.HasOne("Lgm.Emos.Core.Entities.Function", "Function")
                        .WithMany()
                        .HasForeignKey("FunctionId");

                    b.HasOne("Lgm.Emos.Core.Entities.Grade", "Grade")
                        .WithMany()
                        .HasForeignKey("GradeId");

                    b.HasOne("Lgm.Emos.Core.Entities.ApplicationGroup", "Group")
                        .WithMany()
                        .HasForeignKey("GroupId");

                    b.HasOne("Lgm.Emos.Core.Entities.Team")
                        .WithMany("Users")
                        .HasForeignKey("TeamId");
                });

            modelBuilder.Entity("Lgm.Emos.Core.Entities.UserEntity", b =>
                {
                    b.HasOne("Lgm.Emos.Core.Entities.Entity", "Entity")
                        .WithMany()
                        .HasForeignKey("EntityId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Lgm.Emos.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Lgm.Emos.Core.Entities.UserTeam", b =>
                {
                    b.HasOne("Lgm.Emos.Core.Entities.Team", "Team")
                        .WithMany()
                        .HasForeignKey("TeamId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Lgm.Emos.Core.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
